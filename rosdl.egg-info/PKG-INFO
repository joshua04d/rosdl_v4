Metadata-Version: 2.4
Name: rosdl
Version: 0.0.1
Summary: Research Oriented Smart Data Library (CLI + PDF/Math utilities)
Author-email: Joshua Dcosta <joshua04dcosta@gmail.com>
License: MIT
Project-URL: Homepage, https://github.com/joshua04d/rosdl
Project-URL: Documentation, https://github.com/joshua04d/rosdl#readme
Keywords: data,pdf,ai,ml,cli,math
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: click
Provides-Extra: mat
Requires-Dist: numpy; extra == "mat"
Provides-Extra: pdf
Requires-Dist: PyPDF2; extra == "pdf"
Requires-Dist: pdf2image; extra == "pdf"
Requires-Dist: Pillow; extra == "pdf"
Provides-Extra: ocr
Requires-Dist: pytesseract; extra == "ocr"
Requires-Dist: Pillow; extra == "ocr"
Provides-Extra: meta
Requires-Dist: python-magic; extra == "meta"
Requires-Dist: Pillow; extra == "meta"
Requires-Dist: mutagen; extra == "meta"
Requires-Dist: PyPDF2; extra == "meta"

# rosdl
Rosdl: Rapid Open Source Data Library
rosdl is a lightweight Python library that streamlines research and data workflows by combining essential utilities into one package. It offers tools for handling PDFs (split, merge, extract), performing OCR, managing archives, cleaning CSVs, converting file formats, processing images, extracting metadata, running quick EDA with drift detection, and even generating synthetic data. With both Python APIs and a simple CLI, rosdl helps researchers, students, and developers save time and focus on insights instead of struggling with scattered tools.

## Quick install

From the project root:

- Install base package (CLI):
```powershell
python -m pip install -e .
python -m pip install -r requirements.txt
```

- Install optional extras:
  - Math extras:
    ```powershell
    python -m pip install -e ".[mat]"
    ```
  - PDF extras (requires system packages, see below):
    ```powershell
    python -m pip install -e ".[pdf]"
    ```
  - OCR extras:
    ```powershell
    python -m pip install -e ".[ocr]"
    ```
  - Meta extras:
    ```powershell
    python -m pip install -e ".[meta]"
    ```
  - Or install the PDF packages individually:
    ```powershell
    python -m pip install PyPDF2 pdf2image Pillow pytesseract
    ```

## System requirements (Windows)

- Poppler (for pdf2image / pdftotext): add poppler\bin to PATH.
- Tesseract OCR (for OCR): add tesseract to PATH.
Install via your package manager (Chocolatey) or download installers and add to PATH.

## Usage

Run commands from the repo root (or after installing the package the `rosdl` entrypoint will be available).

Basic
```powershell
rosdl hello
```

<!-- Math
```powershell
rosdl mat addition 2 3
rosdl mat subtraction 5 1
``` -->

PDF utilities
```powershell
# split PDF into pages (will prompt for folder name if not provided)
rosdl pdf split input.pdf [out/split_folder]

# merge PDFs (if -o not provided you'll be prompted; default save is next to first input)
rosdl pdf merge file1.pdf file2.pdf ... -o merged.pdf

# extract text -> writes a .txt file next to input by default (will prompt for filename if not provided)
rosdl pdf extract-text input.pdf
rosdl pdf extract-text input.pdf --output out\custom_name.txt

# convert PDF pages to images (requires Poppler)
rosdl pdf to-images input.pdf [out/images_folder]
```

OCR Utilities
```powershell
# OCR an image or PDF page (requires Tesseract)
# will prompt for output filename or use --output
rosdl ocr input.png
rosdl ocr input.png --output out\ocr_output.txt
```

METADATA EXTRACTOR 
```powershell
# extract metadata for a single file
rosdl meta file sample.pdf

# extract metadata for a folder
rosdl meta folder "path_to_folder"

# export metadata (json or csv)
rosdl meta export some_folder -e json -o out\metadata.json
rosdl meta export some_folder -e csv -o out\metadata.csv
```

### Default output behavior
- When an output path/folder is omitted, rosdl will:
  - Prompt only for a filename/folder name (not a full path).
  - Save the result in the same directory as the input file (or inside the input folder for merge-folder).
  - This makes running commands on a file from Desktop create outputs on the Desktop by default.
- You may always supply a full path (or use the relevant --output option) to save elsewhere.

<!-- ## Viewing extracted text
- The extract-text and ocr commands write a .txt file. On Windows:
```powershell
notepad "input.txt"
```
- You can also direct output to stdout or pipe into pagers (Git Bash / WSL) for better preserved layout:
```powershell
rosdl pdf extract-text input.pdf > out\input.txt
less -S out\input.txt
``` -->

## Troubleshooting
- If the CLI fails to import pdf/image/ocr libraries, either:
  - install the pdf extras: python -m pip install -e ".[pdf]" or
  - install missing packages individually.
- If a command requires Poppler or Tesseract install those system tools and add to PATH.
- If `pip install -e .` errors with multiple top-level folders, exclude non-package folders or update package discovery in `pyproje q7yyct.toml`.

## Contributing
Open a PR or issue with minimal repro steps. Keep helpers small and document any system
